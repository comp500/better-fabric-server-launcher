import com.google.gson.*

import java.util.jar.JarFile
import java.util.zip.ZipEntry
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "com.google.code.gson:gson:2.8.0"
	}
}

plugins {
	id 'com.github.johnrengelman.shadow' version '6.0.0'
	id 'java'
	id 'checkstyle'
	id 'maven-publish'
	id 'net.minecrell.licenser' version '0.4.1'
}

archivesBaseName = project.module_namespace
version = project.module_version
group = project.maven_group

repositories {
	mavenCentral()
	jcenter()
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
}

// TODO: resolve versions
project.ext.multiVersions = ["1.16.4", "1.15.2", "1.14.4", "20w51a"]
project.ext.multiVersionsIncludesDefault = project.ext.multiVersions.remove(project.minecraft_version)

configurations {
	loader
	loaderDeps
	intermediaryDefault
	runtimeOnly {
		extendsFrom(loader)
		extendsFrom(loaderDeps)
		extendsFrom(intermediaryDefault)
	}

	for (String version : project.ext.multiVersions) {
		create("intermediary$version")
	}
}

project.sourceSets.all { sourceSet ->
	sourceSet.runtimeClasspath += configurations.loader
	sourceSet.runtimeClasspath += configurations.loaderDeps
	sourceSet.runtimeClasspath += configurations.intermediaryDefault
}

def resolveFabricInstallerJson() {
	for (File file : configurations.getByName("loader").resolve()) {
		JsonObject jsonData = new JarFile(file).withCloseable { jarFile ->
			ZipEntry entry = jarFile.getEntry("fabric-installer.json")
			if (entry == null) {
				null
			} else {
				jarFile.getInputStream(entry).withCloseable { inputStream ->
					JsonObject jsonData = (new Gson()).fromJson(new InputStreamReader(inputStream), JsonObject.class)
					return jsonData
				}
			}
		}
		if (jsonData != null) {
			return jsonData
		}
	}
	return null
}

dependencies {
	// Mod loader and mappings (Minecraft is downloaded at runtime)
	loader("net.fabricmc:fabric-loader:${project.loader_version}") {
		transitive(false)
	}
	intermediaryDefault "net.fabricmc:intermediary:${project.minecraft_version}"

	for (String version : project.ext.multiVersions) {
		"intermediary$version" "net.fabricmc:intermediary:$version"
	}

	afterEvaluate {
		// Look for fabric-installer.json, extract dependencies from it
		JsonObject jsonData = resolveFabricInstallerJson()
		if (jsonData == null) {
			throw new RuntimeException("Error resolving Fabric loader dependencies")
		}
		JsonObject libraries = jsonData.get("libraries").getAsJsonObject()
		for (side in ["common", "server"]) {
			libraries.get(side).getAsJsonArray().each { el ->
				String name = el.getAsJsonObject().get("name").getAsString()
				// Exclude guava as we don't need it (it's in the server jar)
				if (!name.contains("com.google.guava:guava")) {
					loaderDeps(name) {
						transitive(false)
					}
				}
			}
		}
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

jar {
	from 'LICENSE'
	
	manifest {
		attributes (
			"Main-Class": "link.infra.bundle.server.Main",
			"Implementation-Version": project.version
		)
	}

	// The program that builds the final jar should provide this - the normal (non-fatjar) bundle-server-launcher
	// artifact is version-agnostic.
	exclude "bundle-server-launcher.properties"

	archiveBaseName.set("bundle-server-launcher-base")
}

shadowJar {
	archiveBaseName.set("bundle-fabric")
	archiveClassifier.set("")
	archiveVersion.set("${project.minecraft_version}-${project.loader_version}")

	mergeServiceFiles {
		// bundle-server-launcher FileSystemProvider should overwrite jimfs
		exclude "META-INF/services/java.nio.file.spi.FileSystemProvider"
	}
}

build.dependsOn shadowJar

task run(type: JavaExec) {
	doFirst {
		mkdir "run"
	}

	// We have to run the shadowJar, otherwise the FileSystemProvider service file isn't overwritten
	// and manually removing it would be annoying
	classpath = files(tasks.shadowJar)
	workingDir = file("run")
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

ext.genOutputDir = file("$buildDir/generated-resources")

sourceSets {
	main {
		resources {
			srcDirs += [genOutputDir]
		}
	}
}

static JsonElement getJson(URL url) {
	URLConnection conn = url.openConnection()
	conn.setRequestProperty("Accept", "application/json")
	conn.getInputStream().withCloseable {
		new InputStreamReader(it).withReader {
			new JsonParser().parse(it)
		}
	}
}

task generateLauncherProperties(type: WriteProperties) {
	outputFile file("$genOutputDir/bundle-server-launcher.properties")

	// Look for fabric-installer.json, extract main class from it
	JsonObject jsonData = resolveFabricInstallerJson()
	if (jsonData == null) {
		throw new RuntimeException("Error resolving Fabric loader dependencies")
	}
	String mainClass = jsonData.get("mainClass").getAsJsonObject().get("server").getAsString()

	inputs.property "mainClass", mainClass
	inputs.property "gameVersion", project.minecraft_version

	property("launch.mainClass", mainClass)

	doFirst {
		JsonObject manifestData = getJson(new URL("https://launchermeta.mojang.com/mc/game/version_manifest.json")).asJsonObject
		JsonArray versions = manifestData.getAsJsonArray("versions")
		boolean found = false
		for (JsonElement version : versions) {
			JsonObject versionObj = version.getAsJsonObject()
			if (inputs.properties.gameVersion == versionObj.get("id").getAsString()) {
				found = true
				JsonObject gameVersionData = getJson(new URL(versionObj.get("url").getAsString())).asJsonObject
				JsonObject downloadData = gameVersionData.getAsJsonObject("downloads").getAsJsonObject("server")
				property("serverJarUrl", downloadData.get("url").getAsString())
				property("serverJarHash", downloadData.get("sha1").getAsString())
				break
			}
		}
		if (!found) {
			throw new RuntimeException("Failed to resolve version metadata for game version " + inputs.properties.gameVersion)
		}
	}
}

processResources.dependsOn generateLauncherProperties

for (String version : project.ext.multiVersions) {
	task "shadowJar$version"(type: ShadowJar) {
		group = "multi"
		from sourceSets.main.output
		configurations = [project.configurations.compile,
						  project.configurations.loader,
						  project.configurations.loaderDeps,
						  project.configurations."intermediary$version"]

		mergeServiceFiles {
			archiveBaseName.set("bundle-fabric")
			archiveClassifier.set("")
			archiveVersion.set("$version-${project.loader_version}")

			// bundle-server-launcher FileSystemProvider should overwrite jimfs
			exclude "META-INF/services/java.nio.file.spi.FileSystemProvider"
		}
	}
}

task shadowJarMulti {
	group = "multi"
	dependsOn = project.ext.multiVersions.collect {
		tasks."shadowJar$it"
	}
	if (project.ext.multiVersionsIncludesDefault) {
		dependsOn += tasks.shadowJar
	}
}

task buildMulti {
	group = "multi"
	dependsOn = [tasks.shadowJarMulti, tasks.check, tasks.jar]
}

license {
	header file('HEADER')
	include '**/*.java'
}

checkstyle {
	configFile = file("checkstyle.xml")
	toolVersion = '8.31'
}

// Configure the Maven Publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// TODO: should we publish the shadowJar, or will it be compiled elsewhere?

			pom {
				name = project.module_namespace
				description = project.module_description
			}
		}
	}

	repositories {
		mavenLocal()
		// TODO: add maven?
	}
}
